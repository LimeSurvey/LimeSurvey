name: LimeSurvey - CI pipeline
# Triggers the workflow on push or pull request events on all branches
on:
  pull_request:
  push:
    branches:
      - '*'
      - '**'
      - 'dev/**'
      - 'bug/**'
      - 'feature/**'
      - 'zoho/**'

jobs:
  CI-pipeline:
    runs-on: ubuntu-22.04    # ubuntu runner hosted by Github
    strategy:
      matrix:
        # Specify what versions of php you want to test
        php-versions: ['7.4', '8.3']
    # Env vars for this job
    env:
      DBENGINE: INNODB

    name: PHP ${{ matrix.php-versions }} # Check each version of php specified in matrix
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      # This will change the php version for every version specified in matrix https://github.com/marketplace/actions/setup-php-action
      - name: Install specified PHP
        run: |
          sudo add-apt-repository ppa:ondrej/php
          sudo apt update
          sudo apt -y install php${{ matrix.php-versions }}
          sudo apt-get update > /dev/null
          sudo apt --fix-broken install php php7.4-ldap php7.4-gd php7.4-intl php7.4-zip php7.4-mysql php7.4-xml php7.4-curl php7.4-mbstring php7.4-sqlite3 libapache2-mod-php7.4 -y
          sudo apt --fix-broken install php php8.3-ldap php8.3-gd php8.3-intl php8.3-zip php8.3-mysql php8.3-xml php8.3-curl php8.3-mbstring php8.3-sqlite3 libapache2-mod-php8.3 -y
          sudo update-alternatives --set php /usr/bin/php8.3

      # Start the MySQL service - https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu1804-README.md#mysql
      - name: Start the MySQL service
        run: |
          sudo systemctl start mysql.service

      - name: Initialize and check all dependencies
        run: |
          # Before running composer install, check that the autoloader is up-to-date and all classes can be loaded.
          php tests/check_autoloader.php

          # Test
          echo $archive_url
          php -r 'var_dump(PHP_INT_SIZE);'
          # Install LimeSurvey.
          php -m  # Spit out all loaded PHP modules
          mysql --version
          touch enabletests
          # NB: PHPUnit 6.5.* is installed with composer.
          composer install -vvv
          ./vendor/bin/phpunit --version
      - name: Set up Apache+PHP
        run: |
          # Set up the Apache and PHP
          sudo cp -f ./tests/CI-pipeline/github-actions-apache /etc/apache2/sites-available/000-default.conf
          sudo sed -e "s?%CI_BUILD_DIR%?$(pwd)?g" --in-place /etc/apache2/sites-available/000-default.conf
          sudo service apache2 restart

          # Give permision to access files for Apache
          setfacl -dR -m u:www-data:rwX -m u:$(whoami):rwx ./tmp
          setfacl -dR -m u:www-data:rwX -m u:$(whoami):rwx ./upload
          setfacl -dR -m u:www-data:rwX -m u:$(whoami):rwx ./themes
          setfacl -dR -m u:www-data:rwX -m u:$(whoami):rwx ./tests/tmp
          setfacl -dR -m u:www-data:rwX -m u:$(whoami):rwx ./application/config

          chmod -R 777 ./tmp
          sudo chown -R www-data:docker ./tmp
          chmod -R 777 ./upload
          chmod -R 777 ./themes  # Need 777 so both console and web server can cd into the folder.
          chmod -R 777 ./tests/tmp
          chmod -R 777 ./application/config
          chmod +x ./tests/bin/lint-*
          chmod 777 /home/runner

      - name: Check MySQL service
        run: |
          # InnoDB needs large_file_prefix & Barracuda file format
          # https://discuss.gogs.io/t/solved-mysql-error-1064-while-running-first-install/1604
          # InnoDB variables ARE already set to desired values in Github runner (ubuntu-18.04)
          sudo systemctl start mysql
          sudo service mysql status
          mysql -uroot -proot -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';" || true
          mysql -uroot -proot -e "Show  variables like '%large%';"
          mysql -uroot -proot -e "Show  variables like '%innodb_file%';"
          mysql -uroot -proot -e "Show  variables like '%innodb_default%';"
          mysql -uroot -proot -e "CREATE DATABASE limesurvey;"

      - name: Load custom console and start the Application
        run: |
          cp application/config/config-sample-mysql.php application/config/config.php
          php application/commands/console.php install admin password TravisLS no@email.com verbose
          # Enable debug=2 in config file. OBS: This assumes debug is on line 61.
          # TODO: Disable, a lines was added to config file and some tests started to fail.
          # NB: EmCache is always disabled when debug => 2
          # NB: There can be a difference in assets used when debug = 0 or 2 (minified version or not)
          # sed -i '60s/.*/        "debug"=>2,/' application/config/config.php
          # cat application/config/config.php

      # for debugging
     # - name: Setup upterm session
     #   uses: lhotari/action-upterm@v1
     #   if: ${{ contains(matrix.php-versions, '7.4') }}
      - name: Test the server
        run: |
          # Test server.
          wget -O - localhost
          #sudo tail -n 500 /var/log/apache2/error.log || true
          #sudo tail -n 500 /var/log/nginx/error.log || true
          #sudo tail -n 500 /var/log/php7.4-fpm.log || true
          #sudo tail -n 500 /var/log/php8.3-fpm.log || true
          # NOTE: php --version might not be the same as setup in apache. Use fwrite(STDERR, phpversion()); in index.php to be sure.
          #which php
          #php --version
          #php -r 'phpinfo();' | grep log
          #php --info | grep log
          #find /var/log

        # Chromedriver setup.
        # Note: Keep getting timeout problems on Travis with chromedriver.
        # wget https://chromedriver.storage.googleapis.com/2.33/chromedriver_linux64.zip
        # unzip chromedriver_linux64.zip
      - name: Set up Selenium with firefox (needed for integrity tests)
        run: |
          echo `which firefox`
          echo `firefox -v`
          echo `geckodriver --version`

          # Setup Selenium with Firefox headless mode, Gecko driver already installed
          wget "https://selenium-release.storage.googleapis.com/3.9/selenium-server-standalone-3.9.1.jar"
          export MOZ_HEADLESS=1
          export MOZ_HEADLESS_WIDTH=1280
          export MOZ_HEADLESS_HEIGHT=1024
          java -jar selenium-server-standalone-3.9.1.jar &
          timeout 10 bash -c 'until curl -s http://localhost:4444/wd/hub/status | grep -q "\"ready\":true"; do sleep 1; done' || { echo "Selenium failed to start within 10 seconds"; exit 1; }

      - name: Run functional tests
        env:
            DOMAIN: localhost
        run: php vendor/bin/phpunit --testdox --stop-on-failure tests/functional

      - name: Upload Screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: tests/tmp/screenshots/
          retention-days: 5

  unit-tests:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          # MySQL tests with PHP 7.4 and 8.3
          - php-version: '7.4'
            db-type: 'mysql'
            db-version: '8.0'
          - php-version: '8.3'
            db-type: 'mysql'
            db-version: '8.0'
          # PostgreSQL tests with PHP 8.3
          - php-version: '8.3'
            db-type: 'pgsql'
            db-version: '14'
          # MSSQL tests with PHP 8.3
          - php-version: '8.3'
            db-type: 'mssql'
            db-version: '2022'
    env:
      DBENGINE: INNODB
    
    name: PHP ${{ matrix.php-version }} - ${{ matrix.db-type }}
    steps:
      - uses: actions/checkout@v4

      - name: Install specified PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: ${{ matrix.db-type == 'pgsql' && 'pdo_pgsql, pgsql' || matrix.db-type == 'mssql' && 'pdo_sqlsrv, sqlsrv' || 'mysql' }}

      - name: Setup
        run: |
          touch enabletests
          composer install -vvv
          sudo apt-get update > /dev/null
          chmod -R 777 ./tmp
          chmod -R 777 ./upload
          chmod -R 777 ./themes
          chmod -R 777 ./tests/tmp
          chmod -R 777 ./application/config

      - name: Install MySQL extensions
        if: matrix.db-type == 'mysql'
        run: |
          sudo apt --fix-broken install php php-mysql php8.3-mysql php7.4-mysql -y

      - name: Check MySQL service
        if: matrix.db-type == 'mysql'
        run: |
          # InnoDB needs large_file_prefix & Barracuda file format
          # https://discuss.gogs.io/t/solved-mysql-error-1064-while-running-first-install/1604
          # InnoDB variables ARE already set to desired values in Github runner (ubuntu-18.04)
          sudo systemctl start mysql
          sudo service mysql status
          mysql -uroot -proot -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';" || true
          mysql -uroot -proot -e "Show  variables like '%large%';"
          mysql -uroot -proot -e "Show  variables like '%innodb_file%';"
          mysql -uroot -proot -e "Show  variables like '%innodb_default%';"
          mysql -uroot -proot -e "CREATE DATABASE limesurvey;"

      - name: Install and setup PostgreSQL
        if: matrix.db-type == 'pgsql'
        run: |
          # Remove any existing PostgreSQL
          sudo systemctl stop postgresql || true
          sudo apt-get remove -y postgresql* || true
          # Add PostgreSQL official repository (PGDG)
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          # Install PostgreSQL
          sudo apt-get update
          sudo apt-get install -y postgresql-${{ matrix.db-version }} postgresql-client-${{ matrix.db-version }}
          # Start PostgreSQL service
          sudo systemctl start postgresql
          sudo systemctl status postgresql
          # Create user and database
          sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'postgres';"
          sudo -u postgres psql -c "CREATE DATABASE limesurvey;"
          # Verify connection and version
          PGPASSWORD=postgres psql -h localhost -U postgres -d limesurvey -c "SELECT version();"

      - name: Install and setup MSSQL Server
        if: matrix.db-type == 'mssql'
        run: |
          # Enable Microsoft Repository for MSSQL Server
          curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor -o /usr/share/keyrings/microsoft-prod.gpg
          curl -fsSL https://packages.microsoft.com/config/ubuntu/22.04/mssql-server-${{ matrix.db-version }}.list | sudo tee /etc/apt/sources.list.d/mssql-server.list
          # Install MSSQL Server
          sudo apt-get update
          sudo apt-get install -y mssql-server
          # Configure MSSQL Server (non-interactive setup)
          sudo MSSQL_SA_PASSWORD='LimeSurvey123!' MSSQL_PID='Developer' /opt/mssql/bin/mssql-conf -n setup accept-eula
          # Verify MSSQL Server is running
          sudo systemctl status mssql-server --no-pager
          # Install Command-Line Tools
          curl -fsSL https://packages.microsoft.com/config/ubuntu/22.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools18 unixodbc-dev
          # Wait for MSSQL to be fully ready
          sleep 10
          # Create database and verify version
          /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'LimeSurvey123!' -C -Q "CREATE DATABASE limesurvey"
          /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'LimeSurvey123!' -C -d limesurvey -Q "SELECT @@VERSION"

      - name: Load custom console and start the Application (MySQL)
        if: matrix.db-type == 'mysql'
        run: |
          cp application/config/config-sample-mysql.php application/config/config.php
          php application/commands/console.php install admin password TravisLS no@email.com verbose

      - name: Load custom console and start the Application (PostgreSQL)
        if: matrix.db-type == 'pgsql'
        run: |
          cp application/config/config-sample-pgsql.php application/config/config.php
          # Update config with correct credentials
          sed -i "s/password=somepassword/password=postgres/g" application/config/config.php
          sed -i "s/'password' => 'somepassword'/'password' => 'postgres'/g" application/config/config.php
          php application/commands/console.php install admin password TravisLS no@email.com verbose

      - name: Load custom console and start the Application (MSSQL)
        if: matrix.db-type == 'mssql'
        run: |
          cp application/config/config-sample-sqlsrv.php application/config/config.php
          # Update config with correct credentials
          sed -i "s/'password' => 'somepassword'/'password' => 'LimeSurvey123!'/g" application/config/config.php
          php application/commands/console.php install admin password TravisLS no@email.com verbose

      - name: Run unit tests
        env:
          XDEBUG_MODE: coverage
        run: php vendor/bin/phpunit --testdox --stop-on-failure tests/unit

      - name: Upload cov.xml
        uses: actions/upload-artifact@v4
        with:
          name: cov-file-${{ matrix.php-version }}-${{ matrix.db-type }}
          path: cov.xml

  test-coverage:
    runs-on: ubuntu-22.04
    needs: unit-tests
    strategy:
      matrix:
        include:
          # MySQL tests with PHP 7.4 and 8.3
          - php-version: '7.4'
            db-type: 'mysql'
          - php-version: '8.3'
            db-type: 'mysql'
          # PostgreSQL tests with PHP 8.3
          - php-version: '8.3'
            db-type: 'pgsql'
          # MSSQL tests with PHP 8.3
          - php-version: '8.3'
            db-type: 'mssql'
    steps:
      - uses: actions/checkout@v4

      - name: Install specified PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}

      - name: Check if cov.xml artefact exists
        uses: xSAVIKx/artifact-exists-action@v0
        id: check_coverage_artifact
        with:
          name: cov-file-${{ matrix.php-version }}-${{ matrix.db-type }}

      - name: Download cov.xml
        if: steps.check_coverage_artifact.outputs.exists == 'true'
        uses: actions/download-artifact@v4
        with:
          name: cov-file-${{ matrix.php-version }}-${{ matrix.db-type }}

      - name: Check test coverage if cov.xml exists (won't work on PHP 8 with current phpunit version)
        run: php tests/bin/check_coverage.php cov.xml 37

  code-check:
    runs-on: ubuntu-22.04
    env:
      DBENGINE: INNODB
    strategy:
      matrix:
        # Specify what versions of php you want to test
        php-versions: ['7.4', '8.3']
    steps:
      - uses: actions/checkout@v4

      - name: Setup
        run: |
          touch enabletests
          composer install -vvv
          sudo apt-get update > /dev/null
          sudo apt --fix-broken install php php-mysql -y
          chmod -R 777 ./tmp
          chmod -R 777 ./upload
          chmod -R 777 ./themes
          chmod -R 777 ./tests/tmp
          chmod -R 777 ./application/config
          chmod +x ./tests/bin/lint-*
      - name: Install specified PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
      - name: Check MySQL service
        run: |
          # InnoDB needs large_file_prefix & Barracuda file format
          # https://discuss.gogs.io/t/solved-mysql-error-1064-while-running-first-install/1604
          # InnoDB variables ARE already set to desired values in Github runner (ubuntu-18.04)
          sudo systemctl start mysql
          sudo service mysql status
          mysql -uroot -proot -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';" || true
          mysql -uroot -proot -e "Show  variables like '%large%';"
          mysql -uroot -proot -e "Show  variables like '%innodb_file%';"
          mysql -uroot -proot -e "Show  variables like '%innodb_default%';"
          mysql -uroot -proot -e "CREATE DATABASE limesurvey;"
      - name: Load custom console and start the Application
        run: |
          cp application/config/config-sample-mysql.php application/config/config.php
          php application/commands/console.php install admin password TravisLS no@email.com verbose
      - name: Run syntax check, CodeSniffer, MessDetector, ...
        run: composer test

      - name: Run Psalm on application/ folder with low strictness
        run: |
          ./vendor/bin/psalm -c psalm-all.xml